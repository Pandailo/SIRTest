/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetsir.interfaces;

import java.awt.GridLayout;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Array;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import projetsir.Initialisation;
import projetsir.Parametres;
import projetsir.bd_globale;

/**
 *
 * @author yv965015
 */
public class Confirmation_Frag_Verticale extends javax.swing.JFrame
{

    /**
     * Creates new form Confirmation_Frag_Verticale
     */
    public Confirmation_Frag_Verticale(String table,int[][] frag)
    {
        initComponents();
        this.nom_table.setText(table);
        //1er fragment,2° attribut, si 1 là
        //bd_globale bd=new bd_globale();
        Parametres param = new Parametres();
        int nbS = param.get_nb_serveurs();
        GridLayout gd=new GridLayout(frag.length+1,nbS+1);
        this.pan_verif.setLayout(gd);
        for(int i=0;i<frag.length+1;i++)
        {
            if(i==0)
            {

                for(int j=0;j<nbS+1;j++)
                {
                    if(j==0)
                    {
                        JLabel nomS=new JLabel();
                        nomS.setText("");
                        pan_verif.add(nomS);
                    }
                    else
                    {
                        JLabel nomS=new JLabel();
                        nomS.setText("Site :"+param.get_num_serveur(j-1));
                        pan_verif.add(nomS);
                    }
                }
            }
            else
            {
                 for(int j=0;j<nbS+1;j++)
                {
                    if(j==0)
                    {
                        JLabel nomF=new JLabel();
                        nomF.setText("Fragment "+i);
                        pan_verif.add(nomF); 
                    }
                    else
                    {
                        JCheckBox ch=new JCheckBox();
                        ch.setName(""+i+"_"+j);
                        this.pan_verif.add(ch);
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pan_principal = new javax.swing.JPanel();
        pan_button = new javax.swing.JPanel();
        annuler_button = new javax.swing.JButton();
        valider_button_dis = new javax.swing.JButton();
        pan_verif = new javax.swing.JPanel();
        nom_table = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        pan_principal.setLayout(new java.awt.BorderLayout());

        pan_button.setLayout(new java.awt.GridLayout(1, 0));

        annuler_button.setText("Annuler");
        annuler_button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                annuler_buttonActionPerformed(evt);
            }
        });
        pan_button.add(annuler_button);

        valider_button_dis.setText("Valider");
        valider_button_dis.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                valider_button_disActionPerformed(evt);
            }
        });
        pan_button.add(valider_button_dis);

        pan_principal.add(pan_button, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout pan_verifLayout = new javax.swing.GroupLayout(pan_verif);
        pan_verif.setLayout(pan_verifLayout);
        pan_verifLayout.setHorizontalGroup(
            pan_verifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        pan_verifLayout.setVerticalGroup(
            pan_verifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 275, Short.MAX_VALUE)
        );

        pan_principal.add(pan_verif, java.awt.BorderLayout.CENTER);

        nom_table.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pan_principal.add(nom_table, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(pan_principal);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void annuler_buttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_annuler_buttonActionPerformed
    {//GEN-HEADEREND:event_annuler_buttonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_annuler_buttonActionPerformed

    private void valider_button_disActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_valider_button_disActionPerformed
    {//GEN-HEADEREND:event_valider_button_disActionPerformed
        
    }//GEN-LAST:event_valider_button_disActionPerformed

    private String construction_table(String table,int[][] sel,String[] frags,String[] atts)
    {
        Parametres parametres = new Parametres();
        String login = parametres.getBD_login();
        String mdp = parametres.getBD_mdp();
        int num_serveur = parametres.get_num_serveur_local();
        bd_globale bd=new bd_globale();
        String s ="\t\t{\n\t\t\t\"nom\":\""+table+"\",\n";
        s += "\t\t\t\"fragmentation\":\"verticale\",\n";
        s += "\t\t\t\"attributs\":\n\t\t\t[\n";
        Connection connect=null;
        String url;
        try 
        {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            url = "jdbc:oracle:thin:@butor:1521:ensb2016";
            connect = DriverManager.getConnection(url, login, mdp);
            System.out.println("Connecté à la BD depuis la fac.");
        } 
        catch (SQLException ex) 
        {
            url = "jdbc:oracle:thin:@ufrsciencestech.u-bourgogne.fr:25561:ensb2016";
            try 
            {
                connect = DriverManager.getConnection(url, login, mdp);
                System.out.println("Connecté à la BD depuis l'extérieur de la fac.");
            } 
            catch (SQLException ex1) 
            {
                Logger.getLogger(Initialisation.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Initialisation.class.getName()).log(Level.SEVERE, null, ex);
        }
        try 
        {
            String[] cles_primaires = bd.get_cles_primaires(table);
            List<String> pks=Arrays.asList(cles_primaires);
            Statement stmt = connect.createStatement();
            ResultSet res = stmt.executeQuery("SELECT * FROM "+table);
            ResultSetMetaData rsmd = res.getMetaData();
            int nb_attributs = rsmd.getColumnCount();
            String nom_attribut = "";
            for(int i=1; i<=nb_attributs; i++)
            {
                nom_attribut = rsmd.getColumnName(i);
                s += "\t\t\t\t{\n\t\t\t\t\t\"nom_attribut\":\""+nom_attribut+"\",\n";
                s+= "\t\t\t\t\t\"cle_primaire\":";
                if(pks.contains(nom_attribut))
                    s += "\"oui\",\n";
                else
                    s += "\"non\",\n";
                s += "\t\t\t\t\t\"type\":\""+rsmd.getColumnTypeName(i)+"("+rsmd.getPrecision(i)+")\",\n";
                s += "\t\t\t\t\t\"serveurs\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n";
                s += "\t\t\t\t\t\t\t\"num_serveur\":"+num_serveur+"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n";
                s += "\t\t\t\t}";
                if(i<nb_attributs)
                    s += ",";
                s += "\n";
            }    
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(Initialisation.class.getName()).log(Level.SEVERE, null, ex);
        }
        s += "\t\t\t]\n\t\t}";
        return s;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Confirmation_Frag_Verticale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Confirmation_Frag_Verticale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Confirmation_Frag_Verticale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Confirmation_Frag_Verticale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton annuler_button;
    private javax.swing.JLabel nom_table;
    private javax.swing.JPanel pan_button;
    private javax.swing.JPanel pan_principal;
    private javax.swing.JPanel pan_verif;
    private javax.swing.JButton valider_button_dis;
    // End of variables declaration//GEN-END:variables
}
