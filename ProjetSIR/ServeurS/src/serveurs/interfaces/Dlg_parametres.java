/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serveurs.interfaces;

import java.awt.GridLayout;
import java.util.*;
import javax.swing.*;
import serveurs.Parametres;
/**
 *
 * @author ag092850
 */
public class Dlg_parametres extends javax.swing.JFrame {

    private Parametres parametres;
    private int nb_serveurs;
    private List<String> serveurs_externes;
    /**
     * Creates new form Dlg_parametres
     */
    public Dlg_parametres() {
        initComponents();
        this.initialisation();
    }

    private void initialisation()
    {
        this.parametres = new Parametres();
        this.NumLocal.setValue(this.parametres.getNum_serveur());
        this.PortLocal.setText(""+this.parametres.getPort());
        this.LoginBD.setText(this.parametres.getBD_login());
        this.MdpBD.setText(this.parametres.getBD_mdp());
        this.nb_serveurs = this.parametres.getNb_serveurs();
        this.serveurs_externes = new ArrayList<>();
        for(int i=0; i<this.nb_serveurs; i++)
        {
            this.serveurs_externes.add(this.parametres.getNum_serveur_distant(i)+" "+
                    this.parametres.getIp_serveur_distant(i)+" "+
                    this.parametres.getPort_serveur_distant(i));
        }
        this.remplissageServeurs();
    }
    
    private void remplissageServeurs()
    {
        int num_serveur;
        String ip;
        String port;
        String[] split;
        this.Serveurs.removeAll();
        this.Serveurs.setLayout(new GridLayout(this.nb_serveurs, 5));
        for(int i=0; i<this.nb_serveurs; i++)
        {
            split = this.serveurs_externes.get(i).split(" ");
            num_serveur = Integer.parseInt(split[0]);
            ip = split[1];
            port = split[2];
            //Ne pas ajouter le serveur si c'est le local
            JLabel jl = new JLabel();
            jl.setText("Serveur "+num_serveur+" : ");
            SpinnerModel model = new SpinnerNumberModel();
            JSpinner js = new JSpinner(model);
            js.setValue(num_serveur);
            js.setName("js "+i);
            JTextField jtf1 = new JTextField();
            jtf1.setText(ip);
            jtf1.setName("ip "+i);
            JTextField jtf2 = new JTextField();
            jtf2.setText(port);
            jtf2.setName("port "+i);
            JButton jb = new JButton();
            jb.setText("Supprimer");
            jb.setName(this.serveurs_externes.get(i));
            //Ajout du listener
            jb.addActionListener(new java.awt.event.ActionListener() 
            {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    supprimerServeur(evt);
                }
            });
            this.Serveurs.add(jl);
            this.Serveurs.add(js);
            this.Serveurs.add(jtf1);
            this.Serveurs.add(jtf2);
            this.Serveurs.add(jb);
        }
        this.setSize(this.getWidth()+1, this.getHeight()+1);
        this.setSize(this.getWidth()-1, this.getHeight()-1);
    }
    
    private void supprimerServeur(java.awt.event.ActionEvent evt)
    {
        JButton jb = (JButton)evt.getSource();
        this.nb_serveurs--;
        this.serveurs_externes.remove(jb.getName());
        this.remplissageServeurs();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel3 = new javax.swing.JPanel();
        Annuler = new javax.swing.JButton();
        Valider = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        NumLocal = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        PortLocal = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        LoginBD = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        MdpBD = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        AjoutServeur = new javax.swing.JButton();
        Serveurs = new javax.swing.JPanel();

        jPanel3.setLayout(new java.awt.GridLayout(1, 2));

        Annuler.setText("Annuler");
        Annuler.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AnnulerActionPerformed(evt);
            }
        });
        jPanel3.add(Annuler);

        Valider.setText("Valider");
        Valider.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ValiderActionPerformed(evt);
            }
        });
        jPanel3.add(Valider);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jPanel1.setLayout(new java.awt.GridLayout(2, 1));

        jPanel2.setLayout(new java.awt.GridLayout(5, 2));

        jLabel1.setText("Numéro du serveur :");
        jPanel2.add(jLabel1);
        jPanel2.add(NumLocal);

        jLabel2.setText("Port du serveur :");
        jPanel2.add(jLabel2);
        jPanel2.add(PortLocal);

        jLabel3.setText("Login da la BD :");
        jPanel2.add(jLabel3);
        jPanel2.add(LoginBD);

        jLabel4.setText("Mot de passe de la BD :");
        jPanel2.add(jLabel4);
        jPanel2.add(MdpBD);

        jLabel5.setText("Serveurs externes :");
        jPanel2.add(jLabel5);

        AjoutServeur.setText("Ajouter un serveur");
        AjoutServeur.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AjoutServeurActionPerformed(evt);
            }
        });
        jPanel2.add(AjoutServeur);

        jPanel1.add(jPanel2);

        Serveurs.setLayout(new java.awt.GridLayout(1, 2));
        jPanel1.add(Serveurs);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnnulerActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_AnnulerActionPerformed

    private void ValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValiderActionPerformed
        int num_serveur_local = (int)this.NumLocal.getValue();
        String port_local = this.PortLocal.getText();
        String login_bd = this.LoginBD.getText();
        String mdp_bd = this.MdpBD.getText();
        boolean valide = true;
        JOptionPane jop = new JOptionPane();
        String message = "Erreurs suivantes : ";
        //Vérification du numéro de serveur local
        if(num_serveur_local!=this.parametres.getNum_serveur())
        {
            if(num_serveur_local<0)
            {
                message += "\nLe numéro du serveur local doit être un entier positif.";
                valide = false;
            }
        }
        //Vérification du port local
        if(!port_local.equals(""+this.parametres.getPort()))
        {
            if(!port_local.matches("[0-9]+"))
            {
                message += "\nLe numéro du port local doit être un entier positif.";
                valide = false;
            }
        }
        //Vérification des numéros de serveurs
        String[][] serveurs_temp = new String[this.Serveurs.getComponentCount()/5][3];
        int cpt = 0;
        for(int i=1; i<this.Serveurs.getComponentCount(); i=i+5)
        {
            JSpinner js = (JSpinner)this.Serveurs.getComponent(i);
            JTextField jt = (JTextField)this.Serveurs.getComponent(i+1);
            serveurs_temp[cpt][0] = ""+js.getValue();
            serveurs_temp[cpt][1] = jt.getText();
            jt = (JTextField)this.Serveurs.getComponent(i+2);
            serveurs_temp[cpt][2] = jt.getText();
            cpt++;
        }
        for(int i=0; i<serveurs_temp.length; i++)
        {
            for(int j=i+1; j<serveurs_temp.length; j++)
            {
                if(Integer.parseInt(serveurs_temp[i][0])==Integer.parseInt(serveurs_temp[j][0]))
                {
                    message += "\nUn numéro de serveur est présent plusieurs fois.";
                    valide = false;
                }
            }
        }
        //Ajout des paramètres dans le fichier
        if(valide)
        {
            this.parametres.setNum_serveur(num_serveur_local);
            this.parametres.setPort(Integer.parseInt(port_local));
            this.parametres.setBD_login(login_bd);
            this.parametres.setBD_mdp(mdp_bd);
            this.parametres.setServeurs(serveurs_temp);
            this.parametres.ecriture_parametres();
            System.out.println("Paramètre changés.");
            this.setVisible(false);
        }
        else
        jop.showMessageDialog(null, message, "Fin de l'initialisation", JOptionPane.INFORMATION_MESSAGE, null);
    }//GEN-LAST:event_ValiderActionPerformed

    private void AjoutServeurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjoutServeurActionPerformed
        String numS = "";
        int num = 0;
        JOptionPane jop = new JOptionPane();
        String message = "Entrer le numéro du serveur";
        boolean continuer = true;
        //Récupération du numéro de serveur
        while(continuer && (!numS.matches("^\\d+$") || numS.matches("") || num<=0))
        {

            numS = jop.showInputDialog(null, message, JOptionPane.QUESTION_MESSAGE);
            if(numS!=null)
            {
                if(numS.matches("^\\d+$"))
                {
                    num=Integer.parseInt(numS);
                    if(num<=0)
                        message="Numéro du serveur positif et non nul.";
                }
                else
                    message="Numéro du serveur positif et non nul.";
            }
            else
            continuer = false;
        }
        if(continuer)
        {
            this.nb_serveurs++;
            this.serveurs_externes.add(num+" "+"0.0.0.0"+" "+"0");
            this.remplissageServeurs();
        }
    }//GEN-LAST:event_AjoutServeurActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dlg_parametres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dlg_parametres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dlg_parametres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dlg_parametres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dlg_parametres().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AjoutServeur;
    private javax.swing.JButton Annuler;
    private javax.swing.JTextField LoginBD;
    private javax.swing.JTextField MdpBD;
    private javax.swing.JSpinner NumLocal;
    private javax.swing.JTextField PortLocal;
    private javax.swing.JPanel Serveurs;
    private javax.swing.JButton Valider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
